from binary_tree import BinaryTree


class LinkedBinaryTree(BinaryTree):
    """Linked representation of a binary tree structure"""
    
    class _Node:
        __slots__ = '_element', '_parent', '_left', '_right'
        
        def __init__(self, element, parent = None, left = None, right = None):
            self._element = element
            self._parent = parent
            self._left = left
            self._right = right
    
    class Position(BinaryTree.Position):
        """An abstraction presenting the location of a single element"""
        
        def __init__(self, container, node):
            self._container = container
            self._node = node
            
        def element(self):
            """return the element stored at this position"""
            return self._node._element
        
        def __eq__(self, other):
            """return True if other is a Position representing the same
            location"""
            return type(other) is type(self) and other._node is self._node
    
    def _validate(self, p):
        """Return associated node, if p is a Position"""
        if not isinstance(p, self.Position):
            raise TypeError('p must be proper Position type')
        if p._container is not self:
            raise ValueError('p does not belong to this container')
        if p._node._parent is p._node:   #convention for deprecated node
            raise ValueError('p is no longer valid')
        return p._node
    
    def _make_position(self, node):
        """Return Position instance for given node (or None if no node)"""
        return self.Position(self, node) if node is not None else None
    
    # -----------------Binary Tree Constructor-----------------
    def __init__(self):
        """Create an initially empty binary tree"""
        self._root = None
        self._size = 0
        self._sentinel = self._Node(None)
    
    # ------------------Public accessor-----------------
    def __len__(self):
        """Return the total number of elements in the Tree"""
        return self._size
    
    def root(self):
        """Return the root Position of the tree (or None if tree is empty)"""
        return self._make_position(self._root)
    
    def parent(self, p):
        """Return the Position of p's parent (or None if p is root)"""
        node = self._validate(p)
        return self._make_position(node._parent)
    
    def left(self, p):
        """Return the Position of p's left child (or None if no left child)"""
        node = self._validate(p)
        return self._make_position(node._left)
    
    def right(self, p):
        """Return the Position of p's right child (or None if no left child)"""
        node = self._validate(p)
        return self._make_position(node._right)
    
    def num_children(self, p):
        """Return the number of children of Position p"""
        node = self._validate(p)
        count = 0
        if node._left is not None:
            count += 1
        if node._right is not None:
            count += 1
        return count
    
    def _add_root(self, e):
        """Place element e at the root of an empty tree and return new
        Position.
        Raise ValueError if tree nonempty"""
        if self._root is not None:
            raise ValueError('Root exists')
        self._size = 1
        self._root = self._Node(e, self._sentinel, self._sentinel, self._sentinel)
        return self._make_position(self._root)
    
    def _add_left(self, p, e):
        """Create a left child for Position p, storing element e.
        Return position of new node.
        Raise ValueError if Position p is invalid or p already has a left
        child"""
        node = self._validate(p)
        if node._left is not self._sentinel:
            raise ValueError('Left child exists')
        self._size += 1
        node._left = self._Node(e, node)
        return self._make_position(node._left)
    
    def _add_right(self, p, e):
        """Create a right child for Position p, storing element e.
        Return position of new node.
        Raise ValueError if Position p is invalid or p already has a right
        child"""
        node = self._validate(p)
        if node._right is not self._sentinel:
            raise ValueError('Right child exists')
        self._size += 1
        node._right = self._Node(e, node)
        return self._make_position(node._right)
    
    def _replace(self, p, e):
        """replace the element at position p with e, and return old element"""
        node = self._validate(p)
        old = node._element
        node._element = e
        return old
    
    def _delete(self, p):
        """Delete the node at Position p, and replace it with its child,
        if any.
        Return the element that has been stored at Position p.
        Raise ValueError if Position p is invalid or p has two children"""
        node = self._validate(p)
        if self.num_children(p) == 2:
            raise ValueError('p has two children')
        child = node._left if node._left else node._right
        if child is not None:
            child._parent = node._parent
        if node is self._root:
            self._root = child
        else:
            parent = node._parent
            if node is parent._left:
                parent._left = child
            else:
                parent._right = child
        self._size -= 1
        node._parent = node
        return node._element
    
    def _attach(self, p, t1, t2):
        """Attach tree t1 and tree t2 as left and right subtrees of external
        p"""
        node = self._validate(p)
        if not self.is_leaf(p):
            raise ValueError('position must be a leaf')
        if not type(self) is type(t1) is type(t2):
            raise TypeError('Tree Types must match')
        self._size += len(t1) + len(t2)
        if not t1.is_empty():
            t1._root._parent = node
            node._left = t1._root
            t1._root = None
            t1._size = 0
        if not t2.is_empty():
            t2._root._parent = node
            node._right = t2._root
            t2._root = None
            t2._size = 0
    
    def _delete_subtree(self, p):
        """delete the subtree rooted at Position p. return position of p's
        parent"""
        node = self._validate(p)
        if node._left is not None:
            self._delete_subtree(self._make_position(node._left))
        if node._right is not None:
            self._delete_subtree(self._make_position(node._right))
        self._size -= 1
        parent = node._parent
        self._delete(p)
        return self._make_position(parent)
    
    def _swap(self, p, q):
        """restructuring the tree so that the node referenced by p takes the
           place of the node referenced by q, and vice versa."""
        node_p = self._validate(p)
        node_q = self._validate(q)
        node_p._parent, node_q._parent = node_q._parent, node_p._parent
        node_p._left, node_q._left = node_q._left, node_p._left
        node_p._right, node_q._right = node_q._right, node_p._right
        if node_p._parent is not node_q.parent:
            if node_p._parent._left == node_q:
                if node_q._parent._left == node_p:
                    node_p._parent._left = node_p
                    node_q._parent._left = node_q
                else:
                    node_p._parent._left = node_p
                    node_q._parent._right = node_q
            else:
                if node_q._parent._left == node_p:
                    node_p._parent._right = node_p
                    node_q._parent._left = node_q
                else:
                    node_p._parent._right = node_p
                    node_q._parent._right = node_q
        else:
            node_p._parent._left, node_p._parent._right = \
                node_p._parent._right, node_p._parent._left
